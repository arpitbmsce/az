// function firstRecurringNumber(input) {
//   for(let i=0; i<input.length; i++) {
//     for(let j=i+1; j<input.length; j++) {
//       if(input[i] == input[j]) {
//         return input[i];
//       }
//     }
//   }
// }
function firstRecurringNumber(input) {
  let leastRecurringIndex = undefined;
  for(let i=0; i<input.length; i++) {
    for(let j=i+1; j<input.length; j++) {
      if(input[i] === input[j]) {
        if(leastRecurringIndex === undefined || 
          leastRecurringIndex > j
        ) {
          leastRecurringIndex = j;
        }
      }
    }
  }
  return leastRecurringIndex && input[leastRecurringIndex];
}

// function firstRecurringNumber2(input) {
//   const map = {};
//   for (let i=0; i<input.length; i++) {
//     if(map[input[i]]) {
//       return input[i];
//     }
//     map[input[i]] = true;
//   }
// }
function firstRecurringNumber2(input) {
  const map = {};
  let leastRecurringNum;
  for (let i=0; i<input.length; i++) {
    if(map[input[i]]) {
      leastRecurringNum = input[i];
    }
    if(leastRecurringNum === undefined) {
      map[input[i]] = true;
    }
  }
  return leastRecurringNum;
}
const array = [2, 5, 5, 3, 1 ,3, 4, 2,  4];
console.log(firstRecurringNumber(array));
console.log(firstRecurringNumber2(array));

const array2 = [100, 2, 101, 1, 3, 200, 4];

function longestContigousSubsequence(input) {
  
}
console.log(longestContigousSubsequence(array2)) // outputs 4 - length of longest continous sequence (1,2,3,4)
